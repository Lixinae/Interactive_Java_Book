package fr.umlv.javanotebook.exercice;

import org.parboiled.common.FileUtils;
import org.pegdown.Extensions;
import org.pegdown.PegDownProcessor;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;

public class Exercices {

	//	private final int id;
	//	private String respons;

	private final HashMap<Integer,String> exercices ;

	public Exercices(){
		exercices = new HashMap<>();
	}

	/**
	 * @return returns the number of exercises in the exercice folder
	 */
	public static String countFiles() {
		return "" + (new File("./exercice").listFiles().length - 1);
	}

	/**
	 * Parses the markdown file and returns the html code generated by the PegDown processor
	 *
	 * @param name : name of the exercise parsed
	 * @return returns the html code generated by the PegDown processor
	 */
	public static String toWeb(String name) {
		String fichier = "./exercice/" + name;
		InputStream input ;
		try {
			input = new FileInputStream(fichier);
		} catch (FileNotFoundException e) {
			return "<p>There is no Exercice " + name + "</p>";
		}
		char[] markdown = FileUtils.readAllChars(input);
		//Preconditions.checkNotNull(markdown, "The specified file isn't found - "+fichier);
		return generateHtml(markdown);
	}

	private static String generateHtml(char[] markdown) {
		PegDownProcessor processor = new PegDownProcessor(Extensions.ALL);
		return processor.markdownToHtml(markdown);
	}

	public static void main(String[] args) {
		Exercices ex = new Exercices() ;
		ex.getAllExercicesAndAnswers();
		System.out.println(ex.exercices);

		System.out.println(countFiles());
	}

	/**
	 * Fetches all the exercise
	 * Associating the id of the exercise with the awaited respons
	 */
	public void getAllExercicesAndAnswers() {
		Path path = Paths.get("./exercice/answers.rep");
		try {
			Files.lines(path).forEach(l -> {
				exercices.put(Integer.parseInt(l.split(" : ")[0]), l.split(" : ")[1]);
			});
		} catch (IOException e) {

			System.err.println(e);
		}
	}

}
